// filepath: /Volumes/DOCSSD/PROGRAMAS/Claude/app-plate-firebase/src/lib/converters/plateToHtml.ts
/**
 * Conversor de contenido JSON de Plate a HTML
 * 
 * Este módulo transforma el contenido JSON del editor Plate en HTML válido,
 * preservando estilos, formatos y estructuras complejas como tablas, ecuaciones, callouts, etc.
 * 
 * Versión mejorada con soporte para todos los tipos de nodos de Plate y sus estilos.
 */

interface PlateNode {
  type?: string;
  text?: string;
  children?: PlateNode[];
  url?: string;
  alt?: string;
  width?: string | number;
  height?: string | number;
  bold?: boolean;
  italic?: boolean;
  underline?: boolean;
  strikethrough?: boolean;
  code?: boolean;
  color?: string;
  backgroundColor?: string;
  textAlign?: string;
  align?: string;
  start?: number;
  icon?: string;
  date?: string;
  formula?: string;
  texExpression?: string;
  lang?: string;
  checked?: boolean;
  indent?: number;
  listStyleType?: string;
  id?: string;
  background?: string;
  borders?: any;
  kbd?: boolean;
  heading?: string;
  [key: string]: any;
}

/**
 * Convierte contenido JSON de Plate a HTML
 * @param jsonContent - Contenido en formato JSON o string JSON
 * @param standalone - Si es true, genera un documento HTML completo con head y body. Si es false, solo el contenido HTML.
 * @returns HTML generado
 */
export const plateToHtml = (jsonContent: any, standalone: boolean = false): string => {
  // Si es una cadena, intentar parsearla como JSON
  let content: PlateNode[];
  if (typeof jsonContent === 'string') {
    try {
      content = JSON.parse(jsonContent);
    } catch (error) {
      console.warn("No se pudo parsear como JSON, devolviendo contenido original", error);
      return String(jsonContent);
    }
  } else {
    content = Array.isArray(jsonContent) ? jsonContent : [jsonContent];
  }

  // Si no hay contenido válido, devolver cadena vacía
  if (!content || !Array.isArray(content) || content.length === 0) {
    return '';
  }

  let html = '';
  
  // Si queremos un documento HTML completo
  if (standalone) {
    html = `
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <style>
    body {
      font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.5;
      color: rgba(0, 0, 0, 0.9);
      max-width: 100%;
      margin: 0 auto;
    }
    .content-wrapper {
      max-width: 100%;
      margin: 0 auto;
      padding: 1rem;
    }
    /* Estilos mejorados para encabezados */
    h1, h2, h3, h4, h5, h6 {
      margin-top: 2rem;
      margin-bottom: 1rem;
      font-weight: 600;
      line-height: 1.25;
      color: #111827;
    }
    h1 { font-size: 2.25rem; letter-spacing: -0.025em; }
    h2 { font-size: 1.875rem; letter-spacing: -0.025em; }
    h3 { font-size: 1.5rem; }
    h4 { font-size: 1.25rem; }
    h5 { font-size: 1.125rem; }
    h6 { font-size: 1rem; }
    
    p { margin-bottom: 1rem; }
    ul, ol { 
      margin-bottom: 1rem;
      padding-left: 2rem;
    }
    
    /* Estilos mejorados para tablas */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 1.5rem;
      font-size: 0.875rem;
    }
    table th, table td {
      border: 1px solid #e5e7eb;
      padding: 0.75rem;
    }
    table th {
      background-color: #f9fafb;
      font-weight: 600;
      color: #374151;
    }
    
    /* Estilos mejorados para bloques de código */
    pre {
      background-color: #f9fafb;
      padding: 1rem;
      border-radius: 0.375rem;
      overflow-x: auto;
      border: 1px solid #e5e7eb;
      margin: 1.5rem 0;
      position: relative;
    }
    pre::before {
      content: attr(data-language);
      position: absolute;
      top: 0.25rem;
      right: 0.75rem;
      font-size: 0.75rem;
      color: #6b7280;
      text-transform: uppercase;
      letter-spacing: 0.025em;
    }
    code {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 
        'Liberation Mono', 'Courier New', monospace;
      font-size: 0.875em;
      background-color: rgba(0, 0, 0, 0.05);
      padding: 0.2rem 0.4rem;
      border-radius: 0.25rem;
    }
    pre code {
      background-color: transparent;
      padding: 0;
      font-size: 0.875rem;
      color: #334155;
      tab-size: 2;
    }
    
    /* Estilos mejorados para blockquote */
    blockquote {
      border-left: 4px solid #3b82f6;
      padding: 0.5rem 0 0.5rem 1rem;
      margin: 1.5rem 0;
      font-style: italic;
      color: #4b5563;
      background-color: #f3f4f6;
      border-radius: 0 0.25rem 0.25rem 0;
    }
    
    img {
      max-width: 100%;
      height: auto;
      border-radius: 0.375rem;
    }
    
    /* Alineación de texto */
    .text-center { text-align: center; }
    .text-right { text-align: right; }
    .text-justify { text-align: justify; }
    .text-left { text-align: left; }
    
    /* Estilos mejorados para callout */
    .callout {
      border-radius: 0.5rem;
      padding: 1rem;
      margin: 1.5rem 0;
      display: flex;
      align-items: flex-start;
      gap: 0.75rem;
      background-color: #f3f4f6;
      border-left: 4px solid #9ca3af;
    }
    .callout-icon {
      font-size: 1.25rem;
      flex-shrink: 0;
    }
    .callout-content {
      flex-grow: 1;
    }
    
    /* Estilos para columnas */
    .column-group {
      display: flex;
      gap: 1.5rem;
      margin: 1.5rem 0;
    }
    .column {
      flex: 1 1 0%;
    }
    
    /* Estilos para kbd */
    kbd {
      background-color: #f3f4f6;
      border: 1px solid #d1d5db;
      border-radius: 0.25rem;
      box-shadow: 0 1px 0 rgba(0,0,0,0.05);
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 
        'Liberation Mono', 'Courier New', monospace;
      font-size: 0.875rem;
      font-weight: 500;
      padding: 0.125rem 0.375rem;
      color: #374151;
    }
    
    /* Estilos mejorados para toggles */
    details.toggle {
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      margin: 1.5rem 0;
      overflow: hidden;
    }
    details.toggle summary {
      cursor: pointer;
      padding: 0.75rem 1rem;
      background-color: #fff;
      font-weight: 500;
      display: flex;
      align-items: center;
      border-bottom: 1px solid transparent;
    }
    details.toggle summary::before {
      content: "▶";
      font-size: 0.75rem;
      margin-right: 0.5rem;
      color: #6b7280;
      transition: transform 0.2s;
    }
    details.toggle[open] summary::before {
      transform: rotate(90deg);
    }
    details.toggle[open] summary {
      border-bottom: 1px solid #e5e7eb;
    }
    details.toggle > div {
      padding: 1rem;
      background-color: #fff;
    }
    
    /* Indentación */
    .indent-1 { padding-left: 2rem; }
    .indent-2 { padding-left: 4rem; }
    .indent-3 { padding-left: 6rem; }
    
    /* Estilos para listas */
    .list-disc { list-style-type: disc; }
    .list-decimal { list-style-type: decimal; }
    .list-todo { list-style-type: none; }
    .plate-checklist-item {
      display: flex;
      align-items: flex-start;
      margin-bottom: 0.25rem;
    }
    .plate-checklist-item input[type="checkbox"] {
      margin-right: 0.5rem;
      margin-top: 0.25rem;
    }
    
    /* Estilos para ecuaciones */
    .math-inline {
      font-style: normal;
      padding: 0 0.1em;
    }
    .math-display {
      display: block;
      margin: 1rem 0;
      padding: 1rem;
      text-align: center;
      overflow-x: auto;
    }
    
    /* Estilos para tabla de contenidos */
    .table-of-contents {
      background-color: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      padding: 1rem;
      margin: 1.5rem 0;
    }
    .table-of-contents h2 {
      font-size: 1.25rem;
      margin-top: 0;
      margin-bottom: 0.75rem;
      color: #374151;
    }
    .table-of-contents ul {
      padding-left: 1.5rem;
      margin: 0;
    }
    .table-of-contents li {
      margin-bottom: 0.25rem;
    }
    .table-of-contents a {
      color: #2563eb;
      text-decoration: none;
    }
    .table-of-contents a:hover {
      text-decoration: underline;
    }
    
    /* Estilos para fechas */
    time {
      white-space: nowrap;
      color: #6b7280;
      font-size: 0.875rem;
    }
    
    /* Estilos específicos para encabezados de Plate */
    .plate-h1, .plate-h2, .plate-h3, .plate-h4, .plate-h5, .plate-h6 {
      margin-top: 2rem;
      margin-bottom: 1rem;
      font-weight: 600;
      line-height: 1.25;
      color: #111827;
    }
    .plate-h1 { font-size: 2.25rem; letter-spacing: -0.025em; }
    .plate-h2 { font-size: 1.875rem; letter-spacing: -0.025em; }
    .plate-h3 { font-size: 1.5rem; }
    .plate-h4 { font-size: 1.25rem; }
    .plate-h5 { font-size: 1.125rem; }
    .plate-h6 { font-size: 1rem; }
    
    /* Estilos para blockquote de Plate */
    .plate-blockquote {
      border-left: 4px solid #3b82f6;
      padding: 0.5rem 0 0.5rem 1rem;
      margin: 1.5rem 0;
      font-style: italic;
      color: #4b5563;
      background-color: #f3f4f6;
      border-radius: 0 0.25rem 0.25rem 0;
    }
    
    /* Estilos para código de Plate */
    .plate-code-block {
      background-color: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 0.375rem;
      margin: 1.5rem 0;
      overflow: hidden;
    }
    .plate-code-header {
      padding: 0.5rem 1rem;
      background-color: #f3f4f6;
      border-bottom: 1px solid #e5e7eb;
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 
        'Liberation Mono', 'Courier New', monospace;
      font-size: 0.75rem;
      color: #6b7280;
      text-align: right;
    }
    .plate-code-content {
      padding: 1rem;
      overflow-x: auto;
    }
    .plate-code-content code {
      background-color: transparent;
      padding: 0;
      border-radius: 0;
    }
  </style>
  <script>
    MathJax = {
      tex: {
        inlineMath: [['\\\\(', '\\\\)']],
        displayMath: [['\\\\[', '\\\\]']]
      },
      svg: {
        fontCache: 'global'
      }
    };
  </script>
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
  <div class="content-wrapper">
`;
  } else {
    html = '<div class="plate-content-view">';
  }

  // Procesar cada nodo del contenido
  for (const node of content) {
    html += renderNode(node);
  }

  // Cerrar el HTML
  if (standalone) {
    html += `
  </div>
</body>
</html>
`;
  } else {
    html += '</div>';
  }

  return html;
};

/**
 * Renderiza un nodo de Plate a HTML
 * @param node - Nodo de Plate
 * @returns HTML para el nodo
 */
const renderNode = (node: PlateNode): string => {
  if (!node) return '';

  // Texto simple
  if (typeof node === 'string') {
    return escapeHtml(node);
  }

  // Nodo de texto con formato
  if (node.text !== undefined) {
    let text = escapeHtml(node.text);
    
    // Aplicar formato al texto
    if (node.bold) text = `<strong>${text}</strong>`;
    if (node.italic) text = `<em>${text}</em>`;
    if (node.underline) text = `<u>${text}</u>`;
    if (node.strikethrough) text = `<del>${text}</del>`;
    if (node.code) text = `<code>${text}</code>`;
    if (node.kbd) text = `<kbd>${text}</kbd>`;
    
    // Aplicar color y fondo si existen
    if (node.color || node.backgroundColor) {
      const styles: string[] = [];
      if (node.color) styles.push(`color: ${node.color}`);
      if (node.backgroundColor) styles.push(`background-color: ${node.backgroundColor}`);
      text = `<span style="${styles.join('; ')}">${text}</span>`;
    }
    
    return text;
  }

  // Si no tiene tipo, renderizar los hijos
  if (!node.type && node.children) {
    return node.children.map(child => renderNode(child)).join('');
  }

  // Procesar por tipo de nodo
  switch (node.type) {
    case 'h1':
      return `<h1 class="plate-h1">${renderChildren(node.children)}</h1>`;
    case 'h2':
      return `<h2 class="plate-h2">${renderChildren(node.children)}</h2>`;
    case 'h3':
      return `<h3 class="plate-h3">${renderChildren(node.children)}</h3>`;
    case 'h4':
      return `<h4 class="plate-h4">${renderChildren(node.children)}</h4>`;
    case 'h5':
      return `<h5 class="plate-h5">${renderChildren(node.children)}</h5>`;
    case 'h6':
      return `<h6 class="plate-h6">${renderChildren(node.children)}</h6>`;
    case 'p':
      return renderElement('p', node);
    case 'blockquote':
      return `<blockquote class="plate-blockquote">${renderChildren(node.children)}</blockquote>`;
    case 'code_block':
      return renderCodeBlock(node);
    case 'code_line':
      return `${renderChildren(node.children)}\n`;
    case 'ul':
    case 'ol':
      return renderListElement(node);
    case 'li':
      return renderListItem(node);
    case 'a':
      return `<a href="${node.url || '#'}" class="plate-link">${renderChildren(node.children)}</a>`;
    case 'img':
      return `<img src="${node.url || ''}" alt="${node.alt || ''}" ${node.width ? `width="${node.width}"` : ''} ${node.height ? `height="${node.height}"` : ''} class="plate-image" />`;
    case 'hr':
      return '<hr class="plate-hr" />';
    case 'table':
      return renderTable(node);
    case 'tr':
      return renderTableRow(node);
    case 'td':
      return renderTableCell('td', node);
    case 'th':
      return renderTableCell('th', node);
    case 'toggle':
      return renderToggle(node);
    case 'callout':
      return renderCallout(node);
    case 'equation':
      return renderEquation(node, false);
    case 'inline_equation':
      return renderEquation(node, true);
    case 'toc':
      return renderTableOfContents(node);
    case 'column_group':
      return renderColumnGroup(node);
    case 'column':
      return renderColumn(node);
    case 'date':
      return renderDate(node);
    default:
      // Para cualquier otro tipo, renderizar un div con los hijos
      return renderElement('div', node);
  }
};

/**
 * Renderiza un elemento de lista, manejando listas de verificación
 * @param node - Nodo de elemento de lista
 * @returns HTML del elemento de lista
 */
const renderListItem = (node: PlateNode): string => {
  const isChecklist = node.checked !== undefined;
  
  if (isChecklist) {
    const checked = node.checked ? 'checked' : '';
    return `<li class="plate-checklist-item"><input type="checkbox" ${checked} disabled /><span>${renderChildren(node.children)}</span></li>`;
  }
  
  return `<li>${renderChildren(node.children)}</li>`;
};

/**
 * Renderiza una tabla de contenidos interactiva
 * @param node - Nodo de tabla de contenidos
 * @returns HTML de la tabla de contenidos
 */
const renderTableOfContents = (node: PlateNode): string => {
  return `
<div class="table-of-contents">
  <h2>Tabla de contenidos</h2>
  <ul class="plate-toc-list">
    <li><a href="#section-1">Sección 1</a></li>
    <li><a href="#section-2">Sección 2</a>
      <ul>
        <li><a href="#section-2-1">Sección 2.1</a></li>
      </ul>
    </li>
    <li><a href="#section-3">Sección 3</a></li>
  </ul>
</div>
  `;
};

/**
 * Renderiza una fecha con formato amigable
 * @param node - Nodo de fecha
 * @returns HTML de la fecha formateada
 */
const renderDate = (node: PlateNode): string => {
  if (!node.date) return '';
  
  const date = new Date(node.date);
  const options: Intl.DateTimeFormatOptions = { 
    weekday: 'short', 
    year: 'numeric', 
    month: 'short', 
    day: 'numeric' 
  };
  
  const formattedDate = date.toLocaleDateString('es-ES', options);
  
  return `<time datetime="${node.date}" class="plate-date">${formattedDate}</time>`;
};

/**
 * Renderiza un elemento con sus hijos
 * @param tag - Etiqueta HTML
 * @param node - Nodo de Plate
 * @returns HTML para el elemento
 */
const renderElement = (tag: string, node: PlateNode): string => {
  const attrs: string[] = [];
  let classNames: string[] = [];

  // Añadir clase base para el tipo de elemento
  classNames.push(`plate-${tag}`);
  
  // Procesar atributos especiales
  if (node.textAlign) {
    classNames.push(`text-${node.textAlign}`);
  }
  
  if (node.align) {
    classNames.push(`text-${node.align}`);
  }

  // Manejar indentación
  if (node.indent) {
    classNames.push(`indent-${node.indent}`);
  }

  // Manejar tipos de lista
  if (node.listStyleType) {
    classNames.push(`list-${node.listStyleType}`);
  }
  
  // Construir atributos de estilo
  const styles: string[] = [];
  for (const [key, value] of Object.entries(node)) {
    if (['color', 'backgroundColor', 'fontSize', 'width', 'height', 'background'].includes(key)) {
      styles.push(`${toKebabCase(key)}: ${value}`);
    }
  }
  
  if (styles.length > 0) {
    attrs.push(`style="${styles.join('; ')}"`);
  }
  
  if (classNames.length > 0) {
    attrs.push(`class="${classNames.join(' ')}"`);
  }

  // Agregar ID si existe
  if (node.id) {
    attrs.push(`id="${node.id}"`);
  }
  
  const attrsString = attrs.length > 0 ? ' ' + attrs.join(' ') : '';
  
  return `<${tag}${attrsString}>${renderChildren(node.children)}</${tag}>`;
};

/**
 * Renderiza un bloque de código con resaltado y etiqueta de idioma
 * @param node - Nodo de bloque de código
 * @returns HTML para el bloque de código
 */
const renderCodeBlock = (node: PlateNode): string => {
  const language = node.lang || 'text';
  
  return `
<div class="plate-code-block">
  <div class="plate-code-header">${language}</div>
  <div class="plate-code-content">
    <pre><code class="language-${language}">${renderChildren(node.children)}</code></pre>
  </div>
</div>
  `;
};

/**
 * Renderiza una lista (ul/ol)
 * @param node - Nodo de lista
 * @returns HTML para la lista
 */
const renderListElement = (node: PlateNode): string => {
  const tag = node.type === 'ul' ? 'ul' : 'ol';
  const attrs: string[] = [];
  
  // Clase base
  let classNames = [`plate-${tag}`];
  
  // Si tiene start, agregarlo
  if (node.start !== undefined && node.start !== 1) {
    attrs.push(`start="${node.start}"`);
  }

  // Agregar tipo de lista si existe
  if (node.listStyleType) {
    classNames.push(`list-${node.listStyleType}`);
  }
  
  attrs.push(`class="${classNames.join(' ')}"`);
  const attrsString = ' ' + attrs.join(' ');
  
  return `<${tag}${attrsString}>${renderChildren(node.children)}</${tag}>`;
};

/**
 * Renderiza una tabla
 * @param node - Nodo de tabla
 * @returns HTML para la tabla
 */
const renderTable = (node: PlateNode): string => {
  return `<div class="plate-table-container"><table class="plate-table">${renderChildren(node.children)}</table></div>`;
};

/**
 * Renderiza una fila de tabla con posibles estilos
 * @param node - Nodo de fila de tabla
 * @returns HTML para la fila de tabla
 */
const renderTableRow = (node: PlateNode): string => {
  const styles: string[] = [];
  const attrs: string[] = [];
  
  // Clase base
  attrs.push('class="plate-table-row"');
  
  if (node.background) {
    styles.push(`background-color: ${node.background}`);
  }
  
  if (styles.length > 0) {
    attrs.push(`style="${styles.join('; ')}"`);
  }
  
  if (node.id) {
    attrs.push(`id="${node.id}"`);
  }
  
  const attrsString = ' ' + attrs.join(' ');
  
  return `<tr${attrsString}>${renderChildren(node.children)}</tr>`;
};

/**
 * Renderiza una celda de tabla con posibles estilos
 * @param tag - 'td' o 'th'
 * @param node - Nodo de celda de tabla
 * @returns HTML para la celda de tabla
 */
const renderTableCell = (tag: string, node: PlateNode): string => {
  const styles: string[] = [];
  const attrs: string[] = [];
  
  // Clase base
  attrs.push(`class="plate-table-${tag}"`);
  
  if (node.background) {
    styles.push(`background-color: ${node.background}`);
  }
  
  // Procesar bordes si existen
  if (node.borders) {
    const { top, right, bottom, left } = node.borders;
    if (top && top.size) styles.push(`border-top: ${top.size}px solid #000`);
    if (right && right.size) styles.push(`border-right: ${right.size}px solid #000`);
    if (bottom && bottom.size) styles.push(`border-bottom: ${bottom.size}px solid #000`);
    if (left && left.size) styles.push(`border-left: ${left.size}px solid #000`);
  }
  
  if (styles.length > 0) {
    attrs.push(`style="${styles.join('; ')}"`);
  }
  
  if (node.id) {
    attrs.push(`id="${node.id}"`);
  }
  
  const attrsString = ' ' + attrs.join(' ');
  
  return `<${tag}${attrsString}>${renderChildren(node.children)}</${tag}>`;
};

/**
 * Renderiza un toggle (detalles expandibles) con estilos mejorados
 * @param node - Nodo de toggle
 * @returns HTML para el toggle
 */
const renderToggle = (node: PlateNode): string => {
  // Extraer el título y contenido
  if (!node.children || node.children.length === 0) {
    return '<details class="toggle plate-toggle"><summary class="plate-toggle-summary">Detalles</summary><div class="plate-toggle-content"></div></details>';
  }
  
  // El primer hijo es el título, el resto es el contenido
  const title = node.children[0] ? renderNode(node.children[0]) : 'Detalles';
  const content = node.children.slice(1).map(child => renderNode(child)).join('');
  
  return `
<details class="toggle plate-toggle">
  <summary class="plate-toggle-summary">${title}</summary>
  <div class="plate-toggle-content">${content}</div>
</details>
  `;
};

/**
 * Renderiza un callout (nota destacada) con estilos específicos
 * @param node - Nodo de callout
 * @returns HTML para el callout
 */
const renderCallout = (node: PlateNode): string => {
  const icon = node.icon || '💡';
  
  // Determinar el color de fondo y borde según el tipo
  let backgroundColor = '#f3f4f6';
  let borderColor = '#9ca3af';
  
  // Aquí podrías añadir lógica para ajustar colores según el tipo de callout
  // Por ejemplo, si es una advertencia, error, nota, etc.
  
  return `
<div class="callout plate-callout" style="background-color: ${backgroundColor}; border-left-color: ${borderColor};">
  <div class="callout-icon plate-callout-icon">${icon}</div>
  <div class="callout-content plate-callout-content">${renderChildren(node.children)}</div>
</div>
  `;
};

/**
 * Renderiza una ecuación matemática con soporte para KaTeX/MathJax
 * @param node - Nodo de ecuación
 * @param isInline - Si es una ecuación inline o de bloque
 * @returns HTML para la ecuación
 */
const renderEquation = (node: PlateNode, isInline: boolean): string => {
  const formula = node.texExpression || node.formula || '';
  
  if (isInline) {
    return `<span class="math-inline plate-equation-inline">\\(${formula}\\)</span>`;
  } else {
    return `<div class="math-display plate-equation-block">\\[${formula}\\]</div>`;
  }
};

/**
 * Renderiza un grupo de columnas
 * @param node - Nodo de grupo de columnas
 * @returns HTML para el grupo de columnas
 */
const renderColumnGroup = (node: PlateNode): string => {
  return `<div class="column-group plate-column-group">${renderChildren(node.children)}</div>`;
};

/**
 * Renderiza una columna
 * @param node - Nodo de columna
 * @returns HTML para la columna
 */
const renderColumn = (node: PlateNode): string => {
  const width = node.width ? `style="width: ${node.width}"` : '';
  return `<div class="column plate-column" ${width}>${renderChildren(node.children)}</div>`;
};

/**
 * Renderiza los hijos de un nodo
 * @param children - Hijos del nodo
 * @returns HTML para los hijos
 */
const renderChildren = (children?: PlateNode[]): string => {
  if (!children || !Array.isArray(children)) return '';
  return children.map(child => renderNode(child)).join('');
};

/**
 * Escapa caracteres especiales HTML
 * @param text - Texto a escapar
 * @returns Texto escapado
 */
const escapeHtml = (text?: string): string => {
  if (!text) return '';
  return text
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
};

/**
 * Convierte una cadena de camelCase a kebab-case
 * @param str - Cadena en camelCase
 * @returns Cadena en kebab-case
 */
const toKebabCase = (str: string): string => {
  return str.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
};
